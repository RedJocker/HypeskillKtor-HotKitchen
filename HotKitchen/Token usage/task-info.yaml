type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-serialization:1.6.21"
        }
    }
    def ktor_version = "1.6.7"

    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'kotlin'
    apply plugin: 'kotlinx-serialization'

    repositories {
        mavenCentral()
    }


    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib"
        implementation "io.ktor:ktor-server-core:$ktor_version"
        implementation "io.ktor:ktor-server-netty:$ktor_version"
        implementation("ch.qos.logback:logback-classic:1.2.10")

        implementation "io.ktor:ktor-serialization:$ktor_version"
        implementation('org.jetbrains.exposed:exposed-core:0.37.3')
        implementation('org.jetbrains.exposed:exposed-dao:0.37.3')
        implementation('org.jetbrains.exposed:exposed-jdbc:0.37.3')
        implementation('com.zaxxer:HikariCP:5.0.1')
        implementation("org.postgresql:postgresql:42.3.2")
    }
  learner_created: false
- name: src/resources/application.conf
  visible: true
  text: |-
    ktor {
        deployment {
            port = 28888
        }
        application {
            modules = [hotkitchen.ApplicationKt.module]
        }
    }
  learner_created: false
- name: src/Application.kt
  visible: true
  text: |-
    package hotkitchen

    import io.ktor.application.*

    fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)

    fun Application.module(testing: Boolean = false) {}
  learner_created: false
- name: test/HotKitchenTest.kt
  visible: false
  text: |-
    import com.typesafe.config.ConfigFactory
    import io.ktor.config.*
    import io.ktor.http.*
    import io.ktor.server.testing.*
    import kotlinx.serialization.Serializable
    import kotlinx.serialization.decodeFromString
    import kotlinx.serialization.encodeToString
    import kotlinx.serialization.json.Json
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult

    class HotKitchenTest : StageTest<Any>() {

        @Serializable
        private data class Credentials(var email: String, var userType: String, var password: String)

        @Serializable
        private data class SignUpCredentials(var email: String, var password: String)

        @Serializable
        private data class Token(val token: String)

        private object Messages {
            const val invalidEmail = """{"status":"Invalid email"}"""
            const val invalidPassword = """{"status":"Invalid password"}"""
            const val userAlreadyExists = """{"status":"User already exists"}"""
            const val invalidEmailPassword = """{"status":"Invalid email or password"}"""
        }

        private val time = System.currentTimeMillis().toString()
        private val wrongEmails =
            arrayOf(
                "@example.com",
                time,
                "$time@gmail",
                "$time@mail@com",
                "$time.gmail",
                "$time.mail.ru",
                "$time@yandex.ru@why",
                "$time@yandex@ru.why",
                "@which$time@gmail.com",
                "$time@gmail",
                "$time#lala@mail.us",
                "Goose Smith <$time@example.com>",
                "$time@example.com (Duck Smith)"
            )
        private val wrongPasswords =
            arrayOf(
                "",
                "ad12",
                "ad124",
                "password",
                "0123456",
                "paaaaaaaaaaaasssssword",
                "11113123123123123"
            )
        private val jwtRegex = """^[a-zA-Z0-9]+?\.[a-zA-Z0-9]+?\..+""".toRegex()
        private val currentCredentials = Credentials("$time@mail.com", "client", "password$time")
        private lateinit var signInToken: String
        private lateinit var signUpToken: String


        @DynamicTest(order = 1)
        fun checkWrongEmail(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            for (email in wrongEmails) {
                with(handleRequest(HttpMethod.Post, "/signup") {
                    setBody(Json.encodeToString(Credentials(email, "client", "password123")))
                    addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                }) {
                    if (response.content != Messages.invalidEmail || response.status() != HttpStatusCode.Forbidden)
                        return@withApplication CheckResult.wrong("Invalid email is not handled correctly.\nWrong response message or status code.\n$email is invalid email")
                }
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 2)
        fun checkWrongPassword(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            for (password in wrongPasswords) {
                with(handleRequest(HttpMethod.Post, "/signup") {
                    setBody(Json.encodeToString(Credentials(currentCredentials.email, "client", password)))
                    addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                }) {
                    if (response.content != Messages.invalidPassword || response.status() != HttpStatusCode.Forbidden)
                        return@withApplication CheckResult.wrong("Invalid password is not handled correctly.\nWrong response message or status code.\n$password is invalid password")
                }
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 3)
        fun getSignInJWTToken(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Post, "/signup") {
                setBody(Json.encodeToString(currentCredentials))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                try {
                    val principal = Json.decodeFromString<Token>(response.content ?: "")
                    signInToken = principal.token
                    if (!signInToken.matches(jwtRegex) || signInToken.contains(currentCredentials.email))
                        return@withApplication CheckResult.wrong("Invalid JWT token")
                } catch (e: Exception) {
                    return@withApplication CheckResult.wrong("Cannot get token form /signin request")
                }
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 4)
        fun registerExistingUser(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Post, "/signup") {
                setBody(Json.encodeToString(currentCredentials))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                if (response.content != Messages.userAlreadyExists || response.status() != HttpStatusCode.Forbidden)
                    return@withApplication CheckResult.wrong("An existing user is registered. Wrong response message or status code.")
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 5)
        fun wrongAuthorization(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Post, "/signin") {
                setBody(Json.encodeToString(SignUpCredentials("why?does?this?email?exists", currentCredentials.password)))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                if (response.content != Messages.invalidEmailPassword || response.status() != HttpStatusCode.Forbidden)
                    return@withApplication CheckResult.wrong("Error when authorizing a user using a wrong email. Wrong response message or status code.")
            }
            with(handleRequest(HttpMethod.Post, "/signin") {
                setBody(Json.encodeToString(SignUpCredentials(currentCredentials.email, "completelyWrong123")))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                if (response.content != Messages.invalidEmailPassword || response.status() != HttpStatusCode.Forbidden)
                    return@withApplication CheckResult.wrong("Error when authorizing a user using a wrong password. Wrong response message or status code.")
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 6)
        fun getSignUpJWTToken(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Post, "/signin") {
                setBody(Json.encodeToString(SignUpCredentials(currentCredentials.email, currentCredentials.password)))
                addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
            }) {
                try {
                    val principal = Json.decodeFromString<Token>(response.content ?: "")
                    signUpToken = principal.token
                    if (!signUpToken.matches(jwtRegex) || signUpToken.contains(currentCredentials.email))
                        return@withApplication CheckResult.wrong("Invalid JWT token")
                } catch (e: Exception) {
                    return@withApplication CheckResult.wrong("Cannot get token form /signup request")
                }
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 7)
        fun wrongValidation(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Get, "/validate") {
                addHeader(
                    HttpHeaders.Authorization,
                    "Bearer lala${(100..999).random()}.blo${(100..999).random()}blo.kek${(100..999).random()}"
                )
            }) {
                if (response.status() != HttpStatusCode.Unauthorized)
                    return@withApplication CheckResult.wrong("Wrong status code when authorizing with a completely wrong token using /validate")
            }
            with(handleRequest(HttpMethod.Get, "/validate") {
                addHeader(HttpHeaders.Authorization, signInToken)
            }) {
                if (response.status() != HttpStatusCode.Unauthorized)
                    return@withApplication CheckResult.wrong("Wrong status code when authorizing with a JWT token using /validate. Do you use \"Bearer\" in header?")
            }
            return@withApplication CheckResult.correct()
        }

        @DynamicTest(order = 8)
        fun correctValidation(): CheckResult = withApplication(
            createTestEnvironment { config = HoconApplicationConfig(ConfigFactory.load("application.conf")) })
        {
            with(handleRequest(HttpMethod.Get, "/validate") {
                addHeader(HttpHeaders.Authorization, "Bearer $signInToken")
            }) {
                if (response.status() != HttpStatusCode.OK || response.content != "Hello, ${currentCredentials.userType} ${currentCredentials.email}")
                    return@withApplication CheckResult.wrong("Token validation with signin token failed.\nStatus code should be \"200 OK\"\nMessage should be \"Hello, ${currentCredentials.userType} ${currentCredentials.email}\"")
            }
            with(handleRequest(HttpMethod.Get, "/validate") {
                addHeader(HttpHeaders.Authorization, "Bearer $signUpToken")
            }) {
                if (response.status() != HttpStatusCode.OK || response.content != "Hello, ${currentCredentials.userType} ${currentCredentials.email}")
                    return@withApplication CheckResult.wrong("Token validation with signup token failed.\nStatus code should be \"200 OK\"\nMessage should be \"Hello, ${currentCredentials.userType} ${currentCredentials.email}\"")
            }
            return@withApplication CheckResult.correct()
        }
    }
  learner_created: false
- name: src/Controller.kt
  visible: true
  text: |-
    package hotkitchen

    import hotkitchen.repository.UserRepository
    import hotkitchen.routing.AuthRouting.authRouting
    import io.ktor.application.*
    import io.ktor.features.*
    import io.ktor.routing.*
    import io.ktor.serialization.*


    object Controller {
        fun Application.controller(userRepository: UserRepository, testing: Boolean) {
            install(Routing) {
    //        trace {
    //            //application.log.trace(it.buildText())
    //            println(it.buildText())
    //        }
                authRouting(userRepository)
            }

            install(ContentNegotiation) {
                json()
            }
        }
    }
  learner_created: true
- name: src/util/CustomLoggerPlugin.kt
  visible: true
  text: |-
    package hotkitchen.util

    import io.ktor.application.*
    import io.ktor.features.*
    import io.ktor.response.*
    import io.ktor.util.*

    class CustomLoggerPlugin {

        class Configuration

        companion object Plugin : ApplicationFeature<ApplicationCallPipeline, Configuration, CustomLoggerPlugin> {
            override val key = AttributeKey<CustomLoggerPlugin>("DataTransformation")
            override fun install(pipeline: ApplicationCallPipeline, configure: Configuration.() -> Unit): CustomLoggerPlugin {
                val plugin = CustomLoggerPlugin()


                pipeline.intercept(ApplicationCallPipeline.Monitoring) { data ->
                    println("call: ${context.request.toLogString()}")
                    proceedWith(subject)
                }

                pipeline.sendPipeline.intercept(ApplicationSendPipeline.Transform) { data ->
                    val dataString = if(data is Unit) "" else ", $data"
                    println("response: ${call.response.status()}$dataString")
                    proceedWith(subject)
                }

                return plugin
            }
        }
    }
  learner_created: true
- name: src/presentation/routing/AuthRouting.kt
  visible: true
  text: |-
    package hotkitchen.routing

    import hotkitchen.error.SignupFail
    import hotkitchen.repository.UserRepository
    import hotkitchen.requestDto.SigninRequest
    import hotkitchen.requestDto.SignupRequest
    import hotkitchen.responseDto.SigninResponse
    import hotkitchen.responseDto.SigninResponse.Status.*
    import hotkitchen.responseDto.SignupResponse
    import hotkitchen.responseDto.SignupResponse.Status.*
    import io.ktor.application.*
    import io.ktor.http.*
    import io.ktor.request.*
    import io.ktor.response.*
    import io.ktor.routing.*

    object AuthRouting {


        fun Routing.authRouting(userRepository: UserRepository) {
            post("/signup") {
                println("call: $call")

                val signupRequest = call.receive<SignupRequest>()
                println("requestBody $signupRequest")


                val eitherUserOrFail = userRepository.addUser(signupRequest)

                val (statusCode, signupResponse) = when (eitherUserOrFail.right) {
                    is SignupFail.DatabaseFail -> {
                        HttpStatusCode.InternalServerError to SignupResponse(REGISTRATION_FAILED)
                    }
                    is SignupFail.ExistingUser -> {
                        HttpStatusCode.Forbidden to SignupResponse(REGISTRATION_FAILED)
                    }
                    null -> {
                        println("userAdded: ${eitherUserOrFail.left}")
                        HttpStatusCode.OK to SignupResponse(SIGNED_UP)

                    }
                }

                println("response: $statusCode, $signupResponse")
                call.respond(statusCode, signupResponse)
            }

            post("/signin") {
                println("call: $call")

                val signinRequest = call.receive<SigninRequest>()
                println("requestBody $signinRequest")

                val maybeUser = userRepository.getUser(signinRequest.email)

                val (statusCode, signinResponse) = if (maybeUser?.password != signinRequest.password) {
                    HttpStatusCode.Forbidden to SigninResponse(AUTHORIZATION_FAILED)
                } else {
                    HttpStatusCode.OK to SigninResponse(SIGNED_IN)
                }

                println("response: $statusCode, $signinResponse")
                call.respond(statusCode, signinResponse)
            }
        }
    }
  learner_created: true
- name: src/presentation/routing/requestDto/SignUpRequest.kt
  visible: true
  text: |-
    package hotkitchen.requestDto

    import hotkitchen.model.User
    import kotlinx.serialization.Serializable

    @Serializable
    data class SignupRequest (
        val email: String,
        val userType: User.Type,
        val password: String,
    )
  learner_created: true
- name: src/presentation/routing/responseDto/SignupResponse.kt
  visible: true
  text: |-
    package hotkitchen.responseDto

    import kotlinx.serialization.SerialName
    import kotlinx.serialization.Serializable

    @Serializable
    data class SignupResponse(
        val status: Status
    ) {
        @Serializable
        enum class Status {
            @SerialName("Signed In") SIGNED_UP,
            @SerialName("Registration failed") REGISTRATION_FAILED,
        }
    }
  learner_created: true
- name: src/util/Validation.kt
  visible: true
  learner_created: true
- name: src/presentation/routing/responseDto/SignInResponse.kt
  visible: true
  text: |-
    package hotkitchen.responseDto

    import kotlinx.serialization.SerialName
    import kotlinx.serialization.Serializable

    @Serializable
    data class SigninResponse(
        val status: Status
    ) {
        @Serializable
        enum class Status {
            @SerialName("Signed Up") SIGNED_IN,
            @SerialName("Authorization failed") AUTHORIZATION_FAILED,
        }
    }
  learner_created: true
- name: src/presentation/routing/responseDto/ApiResponse.kt
  visible: true
  learner_created: true
- name: src/domain/exception/SignupExistingUserException.kt
  visible: true
  text: |-
    package exception

    class SignupExistingUserException(
        override val message: String = "There is already an user with that email registered"): Exception(message)
  learner_created: true
- name: src/data/repository/database/UserDatabase.kt
  visible: true
  text: |-
    package hotkitchen.repository.database

    import hotkitchen.model.User

    interface UserDatabase {
        fun userByEmail(email: String): User?
        fun addUser(email: String, type: User.Type, password: String): User?

    }
  learner_created: true
- name: src/data/repository/database/exposed/UserEntity.kt
  visible: true
  text: |-
    package hotkitchen.repository.database.exposed

    import hotkitchen.model.User
    import org.jetbrains.exposed.dao.IntEntity
    import org.jetbrains.exposed.dao.IntEntityClass
    import org.jetbrains.exposed.dao.id.EntityID

    class UserEntity(id: EntityID<Int>) : IntEntity(id) {
        companion object : IntEntityClass<UserEntity>(UsersTable)

        var email: String by UsersTable.email
        var password: String by UsersTable.password
        var userType: String by UsersTable.userType

        fun toUser(): User {
            return User(email, User.Type.valueOf(userType), password)
        }
    }
  learner_created: true
- name: src/data/repository/database/exposed/ExposedH2UserDatabase.kt
  visible: true
  text: |-
    package hotkitchen.repository.database.exposed

    import hotkitchen.repository.database.UserDatabase
    import hotkitchen.model.User
    import org.jetbrains.exposed.sql.Database
    import org.jetbrains.exposed.sql.transactions.transaction

    class ExposedH2UserDatabase(private val database: Database): UserDatabase {
        override fun userByEmail(email: String): User? {
            return transaction(database) {
                UserEntity.find {
                    UsersTable.email eq email
                }.firstOrNull()
                    ?.toUser()
            }
        }

        override fun addUser(email: String, type: User.Type, password: String): User? {
            return try {
                transaction(database) {
                    UserEntity.new {
                        this.email = email
                        this.userType = type.name
                        this.password = password
                    }
                }.toUser()
            } catch (e: Exception) {
                null
            }
        }
    }
  learner_created: true
- name: src/domain/exception/SignupInvalidEmailException.kt
  visible: true
  learner_created: true
- name: src/domain/exception/SigninAuthorizationFail.kt
  visible: true
  text: |-
    package hotkitchen.exception

    class SigninAuthorizationFail(
        override val message: String = "Failed authorization"): Exception(message)
  learner_created: true
- name: src/domain/service/tokenService/TokenService.kt
  visible: true
  learner_created: true
- name: src/domain/exception/SignupInvalidPasswordException.kt
  visible: true
  learner_created: true
- name: src/domain/service/UserService.kt
  visible: true
  learner_created: true
- name: src/domain/service/tokenService/custom/CustomTokenService.kt
  visible: true
  learner_created: true
- name: src/domain/exception/DatabaseException.kt
  visible: true
  text: |
    package hotkitchen.exception

    class DatabaseException(
        override val message: String = "Database failed") : Exception(message)
  learner_created: true
- name: src/domain/model/User.kt
  visible: true
  text: |
    package hotkitchen.model

    import kotlinx.serialization.SerialName
    import kotlinx.serialization.Serializable

    @Serializable
    data class User (
        val email: String,
        val type: Type,
        val password: String,
    ) {
        @Serializable
        enum class Type {
            @SerialName("staff") STAFF,
            @SerialName("testUser") TEST_USER
        }
    }
  learner_created: true
- name: src/domain/exception/UnauthorizedAccessException.kt
  visible: true
  learner_created: true
- name: src/presentation/routing/ErrorRouting.kt
  visible: true
  learner_created: true
- name: src/presentation/routing/responseDto/TokenResponse.kt
  visible: true
  learner_created: true
- name: src/data/repository/database/InMemoryUserDatabase.kt
  visible: true
  text: |-
    package hotkitchen.repository.database

    import hotkitchen.model.User

    object InMemoryUserDatabase: UserDatabase {

        private val database: MutableList<User> = mutableListOf()

        override fun userByEmail(email: String): User? {
            return database.firstOrNull { it.email == email }
        }

        override fun addUser(email: String, type: User.Type, password: String): User? {
            val user = User(email, type, password)
            database.add(user)
            return user
        }
    }
  learner_created: true
- name: src/data/repository/database/exposed/ExposedDatabaseConnection.kt
  visible: true
  text: |-
    package hotkitchen.repository.database.exposed

    import hotkitchen.repository.database.exposed.UsersTable
    import org.jetbrains.exposed.sql.Database
    import org.jetbrains.exposed.sql.SchemaUtils
    import org.jetbrains.exposed.sql.StdOutSqlLogger
    import org.jetbrains.exposed.sql.addLogger
    import org.jetbrains.exposed.sql.transactions.transaction

    class ExposedDatabaseConnection {
        val database = Database.connect("jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;", "org.h2.Driver")

        init {
            transaction(database) {
                SchemaUtils.create(UsersTable)
                addLogger(StdOutSqlLogger)
            }
        }
    }
  learner_created: true
- name: src/domain/service/tokenService/jwtToken/JwtTokenService.kt
  visible: true
  learner_created: true
- name: src/data/repository/UserRepository.kt
  visible: true
  text: |-
    package hotkitchen.repository

    import hotkitchen.database.UserDatabase
    import hotkitchen.error.SignupFail
    import hotkitchen.model.User

    import hotkitchen.requestDto.SignupRequest
    import hotkitchen.util.Either

    class UserRepository(private val userDatabase: UserDatabase) {

        fun addUser(singUpRequest: SignupRequest): Either<User, SignupFail> {
            val maybeUser = userDatabase.userByEmail(singUpRequest.email)

            return if(maybeUser != null) {
                // user already exists
                Either.ofRight(SignupFail.ExistingUser())
            } else {
                val (email, type, password) = singUpRequest
                val maybeUserAdded = userDatabase.addUser(email, type, password)

                if(maybeUserAdded != null) {
                    Either.ofLeft(maybeUserAdded)
                } else {
                    Either.ofRight(SignupFail.DatabaseFail())
                }
            }
        }

        fun getUser(email: String): User? {
            return userDatabase.userByEmail(email)
        }

    }
  learner_created: true
- name: src/presentation/routing/requestDto/SignInRequest.kt
  visible: true
  text: |-
    package hotkitchen.requestDto

    import kotlinx.serialization.Serializable

    @Serializable
    data class SigninRequest (
        val email: String,
        val password: String,
    )
  learner_created: true
- name: src/data/repository/database/exposed/UsersTable.kt
  visible: true
  text: |-
    package hotkitchen.repository.database.exposed

    import org.jetbrains.exposed.dao.id.IntIdTable
    import org.jetbrains.exposed.sql.Column

    object UsersTable : IntIdTable() {
        val email: Column<String> = varchar("email", 100).uniqueIndex()
        val password: Column<String> = varchar("password", 100)
        val userType: Column<String> = varchar("user_type", 50)
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/22604#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 16 Oct 2022 19:48:21 UTC
record: 2
